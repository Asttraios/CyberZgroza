
[{"content":"","date":"2 September 2025","externalUrl":null,"permalink":"/CyberZgroza/","section":"","summary":"","title":"","type":"page"},{"content":"","date":"2 September 2025","externalUrl":null,"permalink":"/CyberZgroza/tags/blueteam/","section":"Tags","summary":"","title":"Blueteam","type":"tags"},{"content":"Security Information and Event Management - system do centralnego gromadzenia, zarządzania, analizowania i korelacji logów oraz incydentów bezpieczeństwa. To dzięki niemu zespół SOC jest w stanie odpowiednio szybko i precyzyjnie zareagować na zagrożenia w infrastrukturze IT. A myśleliście, żeby postawić takie coś u siebie - korzystając jedynie z darmowych i open-sourcowych narzędzi? W tej mini serii pokażę jak w prosty sposób stworzyć własny wirtualny SIEM sandbox w Proxmox bazujący na Security Onion. Od zera.\nSprzęt #\rGdy pierwszy raz wybierałem hardware, nie miałem jeszcze konkretnego planu stworzenia wirtualnego labu do nauki cyber. Wiedziałem jednak, że będę mocno eksperymentował z szeroko pojętą wirtualizacją i konteneryzacją. Potrzebowałem coś co starczy na dłużej. Zależało mi głównie na:\nmodularności - możliwości dołożenia dodatkowego RAM-u, zmiany CPU niskiej cenie małym rozmiarze niskim poborze prądu Szybko zorientowałem się, że Raspberry nie jest tu dobrym rozwiązaniem. Wysoka cena oraz brak możliwości łatwej zmiany CPU czy RAM skutecznie mnie zniechęciły. Stąd moje oczy zwróciły się ku terminalom/mini-PC. Modularność, niższa cena i prostota wymiany komponentów to było coś, czego szukałem. Wybór konkretnego modelu nie należał jednak do prostych, ale z pomocą przyszedł mi świetny film kanału tata.geek, gdzie porównuje najpopularniejsze i tanie terminale do wirtualizacji/self-hostingu.\nOstatecznie zdecydowałem się na model HP EliteDesk 800 G3. Co na pokładzie?\nIntel Core i3-6100T 32 GB RAM-u DDR4 2666MHz (SODIMM). Początkowo miał tylko 8, więc dokupiłem. Dostępne są 2 sloty. Dysk SSD m.2 256 GB. Później dokupiłem kolejny - tym razem SSD 256 GB na SATA, co patrząc z dzisiejszej perspektywy było słabym wyborem i mogłem dać większą pojemność. Wymiana podzespołów jest tak łatwa jak budowanie z klocków Lego. Nawet osoba nie składająca wcześniej PC nie będzie miała problemu z podstawowymi naprawami i konserwacją.\nUdostępniam też film pokazujący więcej szczegółów terminala.\nNo dobra, ale co z ceną? Mi swojego (używanego) udało się kupić za 268 zł na Allegro. Także całkiem w porządku. Oczywiście są tańsze modele - warto jednak sprawdzić na ile możemy je rozbudować. Może się zdarzyć, że maksymalnie możemy mieć np. 16 GB RAM.\nHypervisor #\rKiedy już wybraliśmy mini-PC, musimy wybrać hypervisora, czyli menedżera odpowiedzialnego za zarządzanie maszynami wirtualnymi/kontenerami i przydzielanie im fizycznych zasobów. Wyróżniamy 2 typy:\nTyp I Typ II Typ I tzw. bare-metal charakteryzuje się tym, że działa bezpośrednio na sprzęcie fizycznym. Zapewnia zazwyczaj większą wydajność i bezpieczeństwo dzięki braku pośredniczącego systemu operacyjnego. Wymaga jednak dedykowanego serwera. Są używane w środowiskach enterprise, gdzie liczy się wyżej wspomniana wydajność. Przykładami są Proxmox (o którym więcej za moment), XEN, VMware vSphere ESXi\nTyp II jest tak naprawdę programem, który negocjuje przydzielanie zasobów z systemem operacyjnym, przez co jest mniej wydajny niż hypervisor typu I i jest mniej skalowalny. Jednak jest łatwiejszy w obsłudze i zarządzaniu. Popularnym rozwiązaniem jest VirtualBox.\nDla naszych domowych potrzeb Proxmox będzie moim zdaniem najlepszym rozwiązaniem:\njest darmowy regularnie aktualizowany open-source łatwy w instalacji przejrzysty UI ma wszystkie inne plusy hypervisora typu I W takim razie mając wybrany mini-PC oraz zarządcę maszyn wirtualnych nie pozostaje nic innego jak konfiguracja środowiska.\n","date":"2 September 2025","externalUrl":null,"permalink":"/CyberZgroza/posts/siem_homelab/","section":"Posts","summary":"Początek konfiguracji. Wybór hardware\u0026rsquo;u i hypervisora","title":"Budowanie SIEM w Proxmox - Część I","type":"posts"},{"content":"\rSzybkie spojrzenie na Proxmox #\rSkoro mamy już naszego mini-PC i hypervisora Proxmox, przejdziemy do wstępnej konfiguracji. Nie będę pokazywał procesu instalacyjnego Proxmoxa, bo jest to naprawdę łatwe i powstało już na ten temat dużo tutoriali.\nPo udanej instalacji ukazuje nam się główny panel w Proxmox. Po lewej stronie możemy zobaczyć nasz \u0026ldquo;Datacenter\u0026rdquo;, czyli nasza cała infrastruktura, najwyższy poziom w hierarchii. Tam zarządzamy globalnymi ustawieniami. \u0026ldquo;pve\u0026rdquo; natomiast jest nodem, czyli pojedynczą instancją Proxmoxa w klastrze. Nam wystarczy tylko jeden, ale w przyszłości możemy dodawać kolejne mini-PC i łączyć je w logiczną całość. Są tam również wylistowane maszyny wirtualne oraz storage. Zachęcam do szczegółowego zapoznania się z samym Proxmoxem bo oferuje naprawdę sporo możliwości.\nTopologia #\rZanim przejdziemy do tworzenia i łączenia ze sobą maszyn wirtualnych, musimy przemyśleć i zaplanować jak w ogóle chcemy zorganizować nasz lab. Dobrym narzędziem do tworzenia schematów i szkiców jest draw.io. Darmowa aplikacja webowa, która umożliwia w łatwy sposób tworzyć takie topologie wraz z opisami i ikonami.\nTak prezentuje się wstępna topologia. Wyjaśnijmy wszystko po kolei:\nStworzę wyizolowane, dedykowane VLANY - każdy o innym przeznaczeniu. Np. w VLAN 5 znajdują się wyłącznie hosty Windows, a w VLAN 2 znajdują się maszynki Red Teamu, które będą przeprowadzały ataki na VLAN 4 bądź 5. Do zarządzania maszynkami użyjemy Red Hata będącego w VLANie \u0026ldquo;Management\u0026rdquo; Wykorzystam Open vSwitch - wirtualny switch dostępny natywnie w Proxmox. Głównym powodem dlaczego go wybrałem jest port mirroring, który jest kluczowy do monitorowania ruchu sieciowego dla SIEM. Linux Bridge niestety nie ma tej funkcji. Dzięki niej, ruch sieciowy może być kopiowany do portu monitorującego SIEM. pfSense jest odpowiedzialny za kontrolę i filtrację ruchu sieciowego dzięki regułom firewalla. Skonfiguruję w nim również VLANy. W VLAN 4 znajdują się maszyny wirtualne Linuxa z podatnymi web aplikacjami do symulowanych ataków. VLAN 3 czyli SIEM - to tutaj będziemy zarządzać i analizować logi, monitorować ruch sieciowy Skoro już mamy plan i wiemy co i gdzie ma się znajdować, przejdźmy do konfiguracji.\npfSense #\rpfSense jest systemem operacyjnym pełniącym jednocześnie funkcję routera oraz firewalla i bazuje na FreeBSD. Istnieje jeszcze inny OS - OpenSense, który jak nazwa sugeruje, też jest oprogramowaniem open-source. Ja jednak zdecydowałem się na ten pierwszy, bo mam z nim nieco większe doświadczenie, ale zachęcam do sprawdzenia obu.\nW pfSense utworzymy reguły firewalla i VLANy. Obraz jest do pobrania za darmo z ich strony: hxxps://www[.]pfsense[.]org/download/\nWgrywamy ISO do wybranego przez nas storage\u0026rsquo;u.\nPrzydatną rzeczą jest to, że gdy podpinamy nowy dysk do mini-PC, w Proxmoxie możemy określić co chcemy na nim przechowywać (np. tylko pamięć dyskowa dla VM, templatki kontenerów, obrazy iso, wszystko na raz)\nZgodnie ze schematem, będziemy potrzebowali stworzyć switch OVS, który będzie przekazywał tagowane ramki do pojedynczego interfejsu sieciowego pfSense. Następnie będą one routowane do odpowiednich VLANów. Czyli klasyczny Router-on-a-stick.\nPrzechodzimy do naszego node\u0026rsquo;a, do zakładki \u0026ldquo;Network\u0026rdquo;. Proxmox posiada domyślny linux bridge, który łączy maszyny wirtualne z fizycznym interfejsem eno1 mini-PC. Tworzymy nowy, OVS Bridge. Przypisujemy tylko nazwę \u0026ldquo;vmbr10\u0026rdquo; i klikamy \u0026ldquo;Create\u0026rdquo;.\nNa liście urządzeń sieciowych pojawia się nasz bridge.\nTeraz stworzymy wirtualnego pfSense. W górnym prawym rogu panelu głównego Proxmox klikamy w \u0026ldquo;Create VM\u0026rdquo; (niebieski przycisk). W pierwszej kolejności wskazujemy node, nadajemy ID i nazwę - najlepiej krótką i rozpoznawalną.\nWskazujemy wgrany obraz\nOpcje systemowe zostawiamy bez zmian. Jedynie zaznaczamy checkbox \u0026ldquo;QEMU Agent\u0026rdquo;. Co to jest QEMU Guest Agent? To oprogramowanie instalowane w systemie operacyjnym gościa, które umożliwia lepszą komunikację między hostem Proxmox a maszyną wirtualną.\nPrzykładowe funkcje:\nInformacje o systemie gościa: CPU, pamięć, dyski\nWymiana danych między hostem a VM (np. kopiowanie plików).\nObsługa funkcji „freeze/thaw” podczas robienia backupów\nAby jednak agent w pełni działał, należy pobrać odpowiedni pakiet na VM. Ja ostatecznie tego nie zrobiłem, ale daję znać że istnieje taka opcja.\nDamy sobie 16 GB wirtualnej pamięci. Wskazujemy również storage, który zostanie wykorzystany. Reszta bez zmian.\nPrzypisujemy do maszyny 2 rdzenie procesora. Jako typ wybieramy \u0026ldquo;host\u0026rdquo;, czyli bezpośrednie wykorzystanie mocy obliczeniowej procesora hosta.\nPrzypisujemy 2 GB pamięci - w zupełności wystarczy\nPrzypisujemy najpierw interfejs sieciowy podpięty do bridge\u0026rsquo;a vmbr0. Reszta bez zmian.\nPotwierdzamy wybór i dodajemy drugi interfejs sieciowy, tym razem połączony z bridgem OVS.\nWybieramy maszynę pfSense z listy i otwieramy konsolę webową (Przycisk \u0026ldquo;Console\u0026rdquo; w górnym prawym rogu). Rozpoczynamy przypisywanie interfejsów. W Proxmox interfejs net0 jest odpowiednikiem vtnet0 w pfSense, net1 to vtnet1 itd.\nPrzypisujemy interfejs WAN. vtnet0 jest podłączony do vmbr0, więc uzyska adres IP z DHCP mojego fizycznego routera (przypominam, że bridge vmbr0 łączy wirtualne maszyny z siecią fizyczną hosta). Symulować to będzie wyjście na Internet.\nPozostały interfejs przypisujemy jako LAN. To jest ten połączony ze switchem OVS.\nZ dostępnych opcji wybieramy \u0026ldquo;Set interface(s) IP address\u0026rdquo;. Przypisujemy interfejsowi LAN adres 10.0.10.1/24. Wyłączamy DHCP i nie przypisujemy adresu IPv6.\nPozostałą konfigurację routera wykonamy przez panel webowy. Utworzymy VLANy i przypiszemy wirtualnym interfejsom adresy IP. Do tego będziemy potrzebowali nową maszynę wirtulną. Ja postawiłem na RedHat Linux, ale jakakolwiek dystrybucja z środowiskiem graficznym i przeglądarką też spełni swoją rolę.\nPrzydzielamy zasoby takie jak dla pfSense, ale z wirtualnym dyskiem o pojemności 32 GB.\nPrzechodzimy przez proces instalacyjny i zmieniamy adres IP na odpowiadający podsieci VLAN 1 (Management).\nWchodzimy w przeglądarkę Firefox i wpisujemy adres bramy domyślnej 10.0.10.1. Naszym oczom powinien ukazać się panel do logowania. Podajemy domyślne dane logowania (username:admin password:pfsense). Przechodzimy przez początkową konfigurację, pozostawiając domyślne opcje. Jedynie zmieniamy hasło na nowe.\nPrzechodzimy do zakładki Interfaces, a następnie do VLANs\nPo utworzeniu VLANów w zakładce Interface Assignments pojawi się możliwość przypisania wirtualnych interfejsów. Poniżej przykładowy interfejs VLANu Management.\nUtworzone VLANy z przypisanymi interefejsami,\nInterfejs LAN nie powinien mieć przypisanego adresu IP, jeśli wszystkie sieci mają być obsługiwane wyłącznie przez VLAN-y. Jeśli od razu usuniemy adresu z LAN i nie mamy jeszcze skonfigurowanych VLAN-ów z adresem i dostępem, stracimy możliwość zalogowania się przez GUI do panelu pfSense.\nPowinniśmy zrobić to w następującej kolejności:\nNajpierw utworzyć VLAN, przypisać mu adres IP i reguły dostępu.\nZweryfikować, że możemy się zalogować przez ten VLAN.\nDopiero wtedy usunąć adres z interfejsu rodzica (parent interface)\nKiedy już mamy utworzone VLANy, możemy przejść do postawienia maszyny wirtualnej Security Onion. O tym w następnej i jednocześnie ostatniej części.\n","date":"2 September 2025","externalUrl":null,"permalink":"/CyberZgroza/posts/siem_homelab2/","section":"Posts","summary":"Stworzenie topologii logicznej i konfiguracja VLAN-ów w pfSense","title":"Budowanie SIEM w Proxmox - Część II","type":"posts"},{"content":"W ostatniej części miniserii o tworzeniu podstawowego SIEM-a przyjrzymy się szczegółom Security Onion oraz postawimy go w utworzonym labie.\nO Security Onion słów kilka #\rSecurity Onion można w dużym skrócie określić jako Kali Linux, tyle że dla Blue Teamu. W 2009 projekt został udostępniony publicznie za darmo przez Douga Burksa, weterana sił powietrznych Stanów Zjednoczonych. Security Onion jest darmową, open-source dystrybucją Linuxa, w której skład wchodzą preinstalowane narzędzia do m.in. intrusion prevention \u0026amp; detection, monitorowania ruchu sieciowego, łatwego zbierania, zarządzania i analizowania logów, threat huntingu. Do ważnych funkcjonalności należą również:\nłatwy i szybki deploy analiza logów usług w chmurze korelacja zdarzeń dashboardy możliwość integracji z EDR (Endpoint Detection \u0026amp; Response) możliwość tworzenia case\u0026rsquo;ów Gotowy Playbook, czyli zestaw reguł i instrukcji pomagających szybciej zidentyfikować i zniwelować zagrożenie W arsenale security onion znajdziemy m.in.:\nSuricata - NIDS \u0026amp; NIPS, służy do wykrywania oraz blokowania szkodliwego ruchu sieciowego na podstawie sygnatur Zeek - narzędzie do monitorowania ruchu sieciowego, zapewnia bardziej szczegółowe logi o przesłanych pakietach m.in. protokoły, żądania, sesje, pliki. Nie działa na podstawie sygnatur jak Suricata, ale w połączeniu dają pełniejszy obraz podejrzanego ruchu sieciowego Strelka - system skanowania i analizy plików. Jego głównym zadaniem jest przetwarzanie plików wyodrębnionych z ruchu sieciowego lub innych źródeł i generowanie szczegółowych metadanych do analizy Elastic Stack - Elasticsearch, Kibana, Logstash. Znana trójka do zbierania, analizowania, korelowania i zarządzania logami Stenographer - przechwytywanie i analiza pakietów, wydajniejszy niż Wireshark w sieciach o dużej przepustowości Elastic Agent - zastąpił Beatsy, agent endpointowy zbierający w czasie rzeczywistym logi systemowe, aplikacji, procesów. Cyberchef - narzędzie do m.in. kodowania/dekodowania, szyfrowania/deszyfrowania danych Narzędzia wykorzystywane w Security Onion są open-source.\nDeployment i wymagania #\rJak wspominałem wyżej, jedną z kluczowych cech SO jest szybkość deploymentu i zautomatyzowana instalacja, nieróżniąca się poziomem skomplikowania od innych popularnych dystrybucji Linuxa. Security Onion możemy postawić na 4 sposoby:\nImport - w tym trybie nie ma możliwości monitorowania ruchu sieciowego na żywo. Można jedynie importować zrzuty PCAP do analizy Evaluation - wersja demonstrująca możliwości narzędzia, nie jest przeznaczona do działania w produkcji Standalone - samodzielna instancja Security Onion, w pełni gotowa do pracy w środowisku produkcyjnym. Monitoruje i analizuje ruch sieciowy na żywo. Wymaga dużo zasobów. Distributed - rozproszona, pełna wersja, podzielona na nody. W pierwszej kolejności konfigurujemy node zarządzający, następnie dołączamy następne, pełniące różne funkcje. Oficjalne wymagania sprzętowe dla wersji Standalone:\n4 CPU cores 24 GB RAM Pamięć masowa min. 200 GB 2 karty sieciowe Jak na jedną maszynkę to dość sporo, dlatego w pierwszej części podkreślałem, że bardzo ważna jest modułowość mini-PC i możliwość zmiany komponentów. Obecnie mam 32 GB, ale spróbujemy przypisać tylko 20 GB RAM-u.\nInstalacja #\rPobieramy obraz z oficjalnej strony Security Onion i wrzucamy go do storage\u0026rsquo;u w Proxmox tak samo jak w przypadku poprzednich maszyn. Przy stawianiu maszyny należy pamiętać, że potrzebuje dwóch interfejsów sieciowych - do zarządzania oraz do monitorowania ruchu sieciowego. Wybieramy połączenie ze switchem vmbr10 (nasz \u0026ldquo;OVS Bridge\u0026rdquo;). W przypadku interfejsu monitorującego wyłączamy firewall. Natomiast w konfiguracji interfejsu zarządzającego zaznaczamy, że ramki mają mieć przypisany tag 3 (VLAN 3 SIEM). Pamiętamy o przypisaniu odpowiedniej ilości zasobów.\nUruchamiamy maszynę wirtualną i przechodzimy przez prostą konfigurację. Poniżej wstawiam kilka ważniejszych ustawień.\nWybieramy standardową instalację.\nWybieramy wersję Standalone\nW moim przypadku SIEM nie ma dostępu do Internetu. Wybieram opcję \u0026ldquo;Airgap\u0026rdquo;- w cyberbezpieczeństwie pojęcie to oznacza po prostu, że host jest fizycznie odizolowany od niezabezpieczonych sieci - w tym przypadku od Internetu. Jeśli będziemy chcieli w przyszłości zaktualizować SO wraz z regułami, wystarczy że wgramy nowy obraz ISO.\nWybieramy interfejs, który da nam dostęp do webowego panelu zarządzającego.\nPrzypisujemy adres IP w naszym VLAN-ie. Zdecydowałem się na 10.0.30.10/24\nPodajemy adres IP bramy domyślnej.\nDomenę DNS zostawiam domyślną.\nWpisujemy adres e-mail do logowania się do panelu webowego oraz do Kibany. Nie musi być prawdziwy.\nJako metodę dostępu do panelu webowego wybrałem adres IP.\nTeraz wskażemy sieć VLAN 1 (Management), żebyśmy mogli z niej uzyskać dostęp do panelu webowego. Z żadnego innego VLAN-a nie dostaniemy się do niego.\nPodsumowanie naszych wyborów.\nPo wpisaniu adresu IP hosta Security Onion w przeglądarkę na Red Hat (VLAN 1), ukazuje nam się panel logowania. Wpisujemy wcześniej podany e-mail i utoworzone hasło.\nSukces! Właśnie postawiliśmy świeżego Security Onion. Jak możecie zauważyć mamy naprawdę sporo logów, dashboardów i zakładek.\nPort mirroring #\rDo poprawnego działania SO została nam jeszcze tylko jedna ważna rzecz do skonfigurowania - port mirroring. Jest to funkcja przełączników (w naszym przypadku Open vSwitch), która pozwala na kopiowanie ruchu z jednego lub wielu interfejsów do interfejsu docelowego w celu analizy tego ruchu. Tym interfejsem docelowym jest interfejs monitorujący w Security Onion. W terminalu Proxmoxa skonfigurujemy go ręcznie, ponieważ ta funkcja nie jest domyślnie włączona gdy wskazujemy interfejs monitorujący podczas instalacji SO.\nW shellu Proxmoxa wpisujemy polecenie \u0026ldquo;ip a\u0026rdquo;, aby zobaczyć wszystkie interfejsy w Proxmox, również te wirtualne. Szukamy interfejsu tap103i1 (103 to ID maszyny wirtualnej SO, i1 to interfejs nr. 1, czyli monitorujący).\nWpisujemy teraz polecenie ustawiające ten interfejs jako odbiorca mirrorowanego ruchu.\n-- --id=@p get port tap103i1\nPobieramy obiekt portu tap103i1\nNadajemy mu alias @p, żeby łatwiej się do niego odwoływać.\n-- --id=@m create mirror name=siemspan select-all=true output-port=@p\nTworzymy nowy obiekt typu Mirror o nazwie siemspan.\nselect-all=true - mirror obejmuje cały ruch na switchu.\noutput-port=@p - cały ten sklonowany ruch zostanie wysłany do portu monitorującego tap103i1\n-- set bridge vmbr10 mirrors=@m\nDo bridge’a vmbr10 przypisujemy właśnie utworzony mirror @m.\nDzięki temu ruch z bridge’a zaczyna być kopiowany zgodnie z regułami, które podałeś w punkcie 2.\nJest tylko jedno ALE. Port mirroring nie jest trwały i po wyłączeniu hosta Proxmoxa lub samej maszyny Security Onion trzeba wpisać polecenie na nowo (po reboocie SO port mirroring nadal działa). Czemu tak się dzieje? Okazuje się, że konfiguracja port mirroringu wprowadzona poleceniem ovs-vsctl zapisywana jest w OVSDB (baza danych Open vSwitch) tylko wtedy, gdy obiekt (np. port lub bridge) faktycznie istnieje w danej chwili. Gdy host Proxmox zostanie zrestartowany, wszystkie dynamiczne interfejsy typu \u0026rsquo;tap\u0026rsquo; znikają i pojawiają się ponownie dopiero w momencie startu maszyn wirtualnych. Ponieważ mirroring w OVS jest powiązany nie z samą nazwą interfejsu (tap103i1), ale z jego UUID, po starcie hosta OVS „gubi” ten obiekt i mirror przestaje działać.\nNatomiast zwykły reboot Security Onion nie powoduje zmian - port mirroring nadal działa. Problem pojawia się dopiero wtedy, gdy OVS sam jest restartowany (np. wraz z całym hostem). Poniżej wylistowałem dane interfejsu monitorującego, do którego spływa ruch sieciowy. Widać na nim aktualne UUID. Po wpisaniu polecenia \u0026lsquo;reboot\u0026rsquo; w shellu Security Onion, UUID pozostaje bez zmian.\nSprawdźmy jednak co się stanie, gdy wymusimy wyłączenie maszyny poprzez przycisk \u0026lsquo;Shutdown\u0026rsquo; w panelu Proxmox.\nJak widać sama nazwa interfejsu pozostaje bez zmian, ale zmieniło się UUID. Jak napisałem wcześniej, OVS \u0026ldquo;skupia się\u0026rdquo; na UUID, nie nazwie. Stąd port mirroring nie działa, bo teoretycznie interfejs, na którym działał pierwotnie, nie istnieje.\nZa pomocą tcpdump sprawdźmy czy interfejs monitorujący otrzymuje kopię ruchu sieciowego. Wyślemy pinga z testowej maszyny RedHat (VLAN 1) do maszyny Xubuntu (VLAN 2).\nFaktycznie - nic się nie pojawiło. Wpiszmy ponownie na hoście Proxmoxa polecenie konfigurujące port mirroring i sprawdźmy, czy tym razem odbieramy skopiowany ruch sieciowy.\nHookscript #\rJak widać, tym razem wszystko działa poprawnie. No dobra, ale czy serio będziemy wpisywać to polecenie ręcznie? Na szczęście Proxmox ma możliwość tworzenia hookscriptów, czyli skryptów które są wykonywane w określonym momencie życia maszyny wirtulanej (tuż przed startem, zaraz po starcie, tuż przed zatrzymaniem, zaraz po zatrzymaniu). Nasze polecenie zostanie uruchomione w fazie zaraz po starcie, a zaraz po zatrzymaniu usuniemy zbędne mirrory związane z bridgem vmbr10. Proxmox wykonuje skrypt podczas każdej z faz z dwoma argumantami - ID maszyny oraz faza jej życia. Np. /var/lib/vz/snippets/so-mirror-hook.sh 201 pre-start\n# Tworzymy katalog w /var/lib/vz o nazwie snippets\rmkdir /var/lib/vz/snippets\r# Tworzymy hookscript w nowym katalogu. Możemy skorzystać z przykładowego # /usr/share/pve-docs/examples/guest-example-hookscript.pl\rnano /var/lib/vz/snippets/portmirror_hookscript.pl\r# Dodajemy uprawnienie pozwalające na wykonanie\rchmod +x /var/lib/vz/snippets/portmirror_hookscript.pl\r# Przypisujemy go do maszyny wirtualnej Security Onion\rqm set 103 --hookscript local:snippets/portmirror_hookscript.pl Skrypt:\n#!/usr/bin/perl\ruse strict;\ruse warnings;\rprint \u0026#34;GUEST HOOK: \u0026#34; . join(\u0026#39; \u0026#39;, @ARGV). \u0026#34;\\n\u0026#34;;\rmy $vmid = shift; my $phase = shift; if ($phase eq \u0026#39;pre-start\u0026#39;) {\rprint \u0026#34;$vmid is starting, doing preparations.\\n\u0026#34;;\r} elsif ($phase eq \u0026#39;post-start\u0026#39;) {\rprint \u0026#34;$vmid started successfully.\\n\u0026#34;;\rif ($vmid == 103) {\rprint \u0026#34;Configuring port mirror for Security Onion (VM $vmid)...\\n\u0026#34;;\rmy $cmd = \u0026#34;ovs-vsctl \u0026#34; .\r\u0026#34;-- --id=\\@p get Port tap${vmid}i1 \u0026#34; .\r\u0026#34;-- --id=\\@m create Mirror name=siemspan select-all=true output-port=\\@p \u0026#34; .\r\u0026#34;-- set Bridge vmbr10 mirrors=\\@m\u0026#34;;\rsystem($cmd) == 0\ror warn \u0026#34;Failed to execute ovs-vsctl command: $!\\n\u0026#34;;\r}\r} elsif ($phase eq \u0026#39;pre-stop\u0026#39;) {\rprint \u0026#34;$vmid will be stopped.\\n\u0026#34;;\r} elsif ($phase eq \u0026#39;post-stop\u0026#39;) {\rprint \u0026#34;$vmid stopped. Doing cleanup.\\n\u0026#34;;\rif ($vmid == 103) {\rprint \u0026#34;Removing port mirror for Security Onion (VM $vmid)...\\n\u0026#34;;\rsystem(\u0026#34;ovs-vsctl clear Bridge vmbr10 mirrors\u0026#34;) == 0\ror warn \u0026#34;Failed to remove mirror: $!\\n\u0026#34;;\r}\r} else {\rdie \u0026#34;got unknown phase \u0026#39;$phase\u0026#39;\\n\u0026#34;;\r} Wyłączymy i włączymy ponownie Security Onion i sprawdzimy za pomocą tcpdump, czy skopiowany ruch jest odbierany.\nJak widać działa - udało nam się zautomatyzować poprawnie działający port mirroring. Dzięki temu cały ruch sieciowy między VLAN-ami będzie mógł być analizowany.\nPosdumowanie #\rW tej trzyczęściowej serii stworzyliśmy szkielet infrastruktury naszego laboratorium SOC. Postawiliśmy i skonfigurowaliśmy Security Onion oraz zautomatyzowaliśmy funkcję port mirroringu. Hookscript dodatkowo usuwa mirrory po wyłączeniu maszyny. Mamy już solidne podstawy, aby zagłębić się w działania Security Onion i tworzyć własne symulowane ataki i na nie reagować. Ale o tym w przyszłych wpisach. Jeśli dotarłeś/aś do końca, to bardzo dziękuję za przeczytanie i mam nadzieję, że w jakiś sposób pomogłem Ci w poprawnej konfiguracji Security Onion.\n","date":"2 September 2025","externalUrl":null,"permalink":"/CyberZgroza/posts/siem_homelab3/","section":"Posts","summary":"Instalacja i konfiguracja Security Onion. Port mirroring w Proxmox","title":"Budowanie SIEM w Proxmox - Część III","type":"posts"},{"content":"","date":"2 September 2025","externalUrl":null,"permalink":"/CyberZgroza/tags/homelab/","section":"Tags","summary":"","title":"Homelab","type":"tags"},{"content":"","date":"2 September 2025","externalUrl":null,"permalink":"/CyberZgroza/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"2 September 2025","externalUrl":null,"permalink":"/CyberZgroza/tags/siem/","section":"Tags","summary":"","title":"Siem","type":"tags"},{"content":"","date":"2 September 2025","externalUrl":null,"permalink":"/CyberZgroza/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","externalUrl":null,"permalink":"/CyberZgroza/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/CyberZgroza/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"\rCześć, nazywam się Krzysztof i studiuję cyberbezpieczeństwo na Politechnice Wrocławskiej. Blog, który teraz czytacie - \u0026ldquo;CyberZgroza\u0026rdquo; - to projekt, który stworzyłem jako pewna forma dokumentowania tego, czego ostatnio się dowiedziałem/nauczyłem z szeroko pojętego bezpieczeństwa IT i motywator do regularnej nauki. Uznałem, że fajnie będzie podzielić się tą wiedzą z innymi za darmochę i jednocześnie monitorować swój progres.\n(O zgrozo! Ale co ja tu mogę przeczytać?)\nNa CyberZgrozie znajdują się artykuły i ciekawostki o różnej tematyce z cyberbezpieczeństwa - zarówno od strony red i blue team. Możecie też tu znaleźć omówienia wybranych maszyn z Hack The Box. Ogólnie - to co mnie akurat zainteresowało ;)\nMiłego czytania!\n-Krzysztof\n","externalUrl":null,"permalink":"/CyberZgroza/about/","section":"","summary":"","title":"O blogu słów kilka...","type":"page"},{"content":"","externalUrl":null,"permalink":"/CyberZgroza/series/","section":"Series","summary":"","title":"Series","type":"series"}]